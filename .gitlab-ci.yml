variables:
  GIT_DEPTH: 10

stages:
  - PEP8
  - fetch
  - data
  - interface
  - threholds
  - updating
  
  
  
  
#PEP8_Comformity:
#  stage: PEP8
#  image: CREATE A DOCKER IMAGE TO RUN ON SERVER
#  script:
#    - "pytest --pep8 --disable-warnings"
#  tags:
#    - jarvis
  
Fetch_data_and_models:
  stage: fetch
  cache:
    key: default
    paths:
        - prod_data/test/
        - prod_models/candidate/
  script:
    - "source /home/pi/Documents/esa/venv/bin/activate"
    - "dvc remote modify --local nielspi password projectesa"
    - "dvc pull"
  tags:
    - audio

Data_validation:
  stage: data
  script:
    - "echo Testing data schema and values"
  tags:
    - audio
    
    
Interface_validation: 
  stage: interface
  script:
    - "echo Testing DNNs interface specification"
  tags:
    - audio


Threshold_validation: 
  stage: threholds
  cache:
    key: default
    paths:
        - prod_data/test/
        - prod_models/candidate/
  script: 
    - "echo Testing DNN metrics against threshold values"
    - "source /home/pi/Documents/esa/venv/bin/activate"
    - "python tests/compute_models_performance.py"
    - "rm -rf prod_data"
    - "rm -rf prod_models"
  tags:
    - audio
    
# Copy accepted model from candidate to deployment push to dvc and git
# Update configuration values

# Updating_deployed_model:
# stage: updating
#  cache:
#    key: default
#    paths:
#        - prod_data/test/
#        - prod_models/candidate/
# script:
#   - "source /home/pi/Documents/esa/venv/bin/activate"
#   - "python update_configuration_file.py"
#   - "python copy_to_deployment.py"
#   - "remove from candidate folder"
#   - "dvc commit"
#   - "dvc push"
# We need to find out how gitlab runner pushes to gitlab
#   - "git add ."
#   - "git commit -m "${userstory}"
#   - "git push"
